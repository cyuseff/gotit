'use strict';

var redis = require('../../config/redis')
  , uuid = require('uuid')
  , NAME_SPACE = 'got-it'
  , PREFIX = 'rol'
  , SET_PREFIX = 'roles';

function generateRedisKey(primaryKey, secondaryKey) {
  var key = NAME_SPACE + ':' + PREFIX + ':' + primaryKey;
  if(secondaryKey) key += ':' + secondaryKey;
  return key;
}

/*
  Rol Model:
    -id:            (uuid)    autogenerated if not provided
    -name:          (string)  required.
    -scope:         (string)  used to give to routes url a context. Ex:
        scope:      'my-url'
        route.url:  '/provider/:scope/some-nested-route' => '/provider/my-url/some-nested-route'

    -accessLevel:   (int)     used to filter the data in a endpoint. 0 is the highest access level.
*/
function Rol(opts) {
  this.id = opts.id || uuid.v1();
  this.name = opts.name;
  this.scope = opts.scope || null;
  this.accessLevel = opts.accessLevel || null;
  this.routes = opts.routes || [];
}


// Static Methods
Rol.findOneById = function(id, callback) {
  var key = generateRedisKey(id);

  redis.GET(key, function(err, rol) {
    if(err) return callback(err);
    if(!rol) return callback(null, null);
    return callback(null, new Rol(JSON.parse(rol)));
  });
};

Rol.findAll = function(callback) {
  var setKey = generateRedisKey(SET_PREFIX)
    , roles = [];

  redis.SMEMBERS(setKey, function(err, keys)Â {
    if(err) return callback(err);
    if(!keys.length) return callback(null, roles);

    redis.MGET(keys, function(err, reply) {
      if(err) return callback(err);
      // convert to objects
      for(var i=0, l=reply.length; i<l; i++) roles.push(JSON.parse(reply[i]));
      return callback(null, roles);
    });
  });
};

Rol.remove = function(id, callback) {
  var key = generateRedisKey(id)
    , setKey = generateRedisKey(SET_PREFIX);

  redis.multi()
    .DEL(key)
    .SREM(setKey, key)
    .exec(function(err, reply) {
      if(err) return callback(err);
      console.log(reply);
      if(!reply[1]) return callback(null, {error: 'Rol not found'});
      return callback(null, {message: 'Rol revoked'});
    });
};


// Instance Methods
Rol.prototype.addRoute = function(url, methods, recursive) {
  if(url && methods && recursive) {
    this.routes.push({
      url: url,
      methods: methods,
      recursive: recursive
    });
  }
};

Rol.prototype.save = function(callback) {
  var me = this
    , key = generateRedisKey(me.id)
    , setKey = generateRedisKey(SET_PREFIX);

  redis.multi()
    .SET(key, JSON.stringify(me))
    .SADD(setKey, key)
    .exec(function(err, reply) {
      if(err) return callback(err);
      return callback(null, reply);
    });
};

module.exports = Rol;
